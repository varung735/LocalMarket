"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _user = _interopRequireDefault(require("./user.model"));

var _user2 = _interopRequireDefault(require("./user.service"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  async createUser(req, res) {
    try {
      const {
        error,
        value
      } = _user2.default.validateUser(req.body);

      if (error && error.details) {
        return res.status(500).json(error.details);
      }

      await _user.default.create(value).then(user => res.json(user)).catch(err => res.status(500).json(err));
    } catch (err) {
      console.log(err);
    }
  },

  findAllUsers(req, res) {
    _user.default.find().then(users => res.json(users)).catch(err => res.status(404).json(err));
  },

  deleteUser(req, res) {
    const id = req.params.id;

    _user.default.findByIdAndRemove(id).then(user => {
      if (!user) {
        return res.status(400).json({
          err: "user not found."
        });
      }

      return res.json(user);
    }).catch(err => res.status(500).json(err));
  },

  updateUser(req, res) {
    const id = req.params.id;

    _user.default.findOneAndUpdate({
      _id: id
    }, {
      $set: req.body
    }, {
      new: true
    }).then(user => {
      if (!student) {
        return res.status(400).json({
          err: "user not found"
        });
      }

      return res.json(user);
    }).catch(err => res.status(500).json(err));
  }

};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGkvUmVzb3VyY2VzL3VzZXIvdXNlci5jb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbImNyZWF0ZVVzZXIiLCJyZXEiLCJyZXMiLCJlcnJvciIsInZhbHVlIiwidXNlclNlcnZpY2UiLCJ2YWxpZGF0ZVVzZXIiLCJib2R5IiwiZGV0YWlscyIsInN0YXR1cyIsImpzb24iLCJVc2VyIiwiY3JlYXRlIiwidGhlbiIsInVzZXIiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJmaW5kQWxsVXNlcnMiLCJmaW5kIiwidXNlcnMiLCJkZWxldGVVc2VyIiwiaWQiLCJwYXJhbXMiLCJmaW5kQnlJZEFuZFJlbW92ZSIsInVwZGF0ZVVzZXIiLCJmaW5kT25lQW5kVXBkYXRlIiwiX2lkIiwiJHNldCIsIm5ldyIsInN0dWRlbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztlQUVjO0FBQ1YsUUFBTUEsVUFBTixDQUFpQkMsR0FBakIsRUFBcUJDLEdBQXJCLEVBQXlCO0FBQ3JCLFFBQUc7QUFDQyxZQUFNO0FBQUNDLFFBQUFBLEtBQUQ7QUFBUUMsUUFBQUE7QUFBUixVQUFpQkMsZUFBWUMsWUFBWixDQUF5QkwsR0FBRyxDQUFDTSxJQUE3QixDQUF2Qjs7QUFDSixVQUFHSixLQUFLLElBQUlBLEtBQUssQ0FBQ0ssT0FBbEIsRUFBMEI7QUFDdEIsZUFBT04sR0FBRyxDQUFDTyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUJQLEtBQUssQ0FBQ0ssT0FBM0IsQ0FBUDtBQUNIOztBQUVELFlBQU1HLGNBQUtDLE1BQUwsQ0FBWVIsS0FBWixFQUFtQlMsSUFBbkIsQ0FBd0JDLElBQUksSUFBSVosR0FBRyxDQUFDUSxJQUFKLENBQVNJLElBQVQsQ0FBaEMsRUFDTEMsS0FESyxDQUNDQyxHQUFHLElBQUlkLEdBQUcsQ0FBQ08sTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCTSxHQUFyQixDQURSLENBQU47QUFFQyxLQVJELENBUUMsT0FBTUEsR0FBTixFQUFVO0FBQ1BDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRixHQUFaO0FBQ0g7QUFDSixHQWJTOztBQWVWRyxFQUFBQSxZQUFZLENBQUNsQixHQUFELEVBQUtDLEdBQUwsRUFBUztBQUNqQlMsa0JBQUtTLElBQUwsR0FBWVAsSUFBWixDQUFpQlEsS0FBSyxJQUFJbkIsR0FBRyxDQUFDUSxJQUFKLENBQVNXLEtBQVQsQ0FBMUIsRUFBMkNOLEtBQTNDLENBQWlEQyxHQUFHLElBQUlkLEdBQUcsQ0FBQ08sTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCTSxHQUFyQixDQUF4RDtBQUNILEdBakJTOztBQW1CVk0sRUFBQUEsVUFBVSxDQUFDckIsR0FBRCxFQUFLQyxHQUFMLEVBQVM7QUFDZixVQUFNcUIsRUFBRSxHQUFHdEIsR0FBRyxDQUFDdUIsTUFBSixDQUFXRCxFQUF0Qjs7QUFDQVosa0JBQUtjLGlCQUFMLENBQXVCRixFQUF2QixFQUEyQlYsSUFBM0IsQ0FBZ0NDLElBQUksSUFBSTtBQUNwQyxVQUFHLENBQUNBLElBQUosRUFBUztBQUNMLGVBQU9aLEdBQUcsQ0FBQ08sTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUNNLFVBQUFBLEdBQUcsRUFBRTtBQUFOLFNBQXJCLENBQVA7QUFDSDs7QUFDRCxhQUFPZCxHQUFHLENBQUNRLElBQUosQ0FBU0ksSUFBVCxDQUFQO0FBQ0gsS0FMRCxFQUtHQyxLQUxILENBS1NDLEdBQUcsSUFBSWQsR0FBRyxDQUFDTyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUJNLEdBQXJCLENBTGhCO0FBTUgsR0EzQlM7O0FBNkJWVSxFQUFBQSxVQUFVLENBQUN6QixHQUFELEVBQUtDLEdBQUwsRUFBUztBQUNmLFVBQU1xQixFQUFFLEdBQUd0QixHQUFHLENBQUN1QixNQUFKLENBQVdELEVBQXRCOztBQUVBWixrQkFBS2dCLGdCQUFMLENBQXNCO0FBQUNDLE1BQUFBLEdBQUcsRUFBRUw7QUFBTixLQUF0QixFQUFnQztBQUFDTSxNQUFBQSxJQUFJLEVBQUM1QixHQUFHLENBQUNNO0FBQVYsS0FBaEMsRUFBZ0Q7QUFBQ3VCLE1BQUFBLEdBQUcsRUFBRTtBQUFOLEtBQWhELEVBQTZEakIsSUFBN0QsQ0FBa0VDLElBQUksSUFBSTtBQUN0RSxVQUFHLENBQUNpQixPQUFKLEVBQVk7QUFDUixlQUFPN0IsR0FBRyxDQUFDTyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFBQ00sVUFBQUEsR0FBRyxFQUFFO0FBQU4sU0FBckIsQ0FBUDtBQUNIOztBQUNELGFBQU9kLEdBQUcsQ0FBQ1EsSUFBSixDQUFTSSxJQUFULENBQVA7QUFDSCxLQUxELEVBS0dDLEtBTEgsQ0FLU0MsR0FBRyxJQUFJZCxHQUFHLENBQUNPLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQk0sR0FBckIsQ0FMaEI7QUFNSDs7QUF0Q1MsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVc2VyIGZyb20gJy4vdXNlci5tb2RlbCc7XHJcbmltcG9ydCB1c2VyU2VydmljZSBmcm9tICcuL3VzZXIuc2VydmljZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdHtcclxuICAgIGFzeW5jIGNyZWF0ZVVzZXIocmVxLHJlcyl7XHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICBjb25zdCB7ZXJyb3IsIHZhbHVlfSA9IHVzZXJTZXJ2aWNlLnZhbGlkYXRlVXNlcihyZXEuYm9keSk7XHJcbiAgICAgICAgaWYoZXJyb3IgJiYgZXJyb3IuZGV0YWlscyl7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbihlcnJvci5kZXRhaWxzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgYXdhaXQgVXNlci5jcmVhdGUodmFsdWUpLnRoZW4odXNlciA9PiByZXMuanNvbih1c2VyKSlcclxuICAgICAgICAuY2F0Y2goZXJyID0+IHJlcy5zdGF0dXMoNTAwKS5qc29uKGVycikpO1xyXG4gICAgICAgIH1jYXRjaChlcnIpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgZmluZEFsbFVzZXJzKHJlcSxyZXMpe1xyXG4gICAgICAgIFVzZXIuZmluZCgpLnRoZW4odXNlcnMgPT4gcmVzLmpzb24odXNlcnMpKS5jYXRjaChlcnIgPT4gcmVzLnN0YXR1cyg0MDQpLmpzb24oZXJyKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIGRlbGV0ZVVzZXIocmVxLHJlcyl7XHJcbiAgICAgICAgY29uc3QgaWQgPSByZXEucGFyYW1zLmlkO1xyXG4gICAgICAgIFVzZXIuZmluZEJ5SWRBbmRSZW1vdmUoaWQpLnRoZW4odXNlciA9PiB7XHJcbiAgICAgICAgICAgIGlmKCF1c2VyKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7ZXJyOiBcInVzZXIgbm90IGZvdW5kLlwifSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKHVzZXIpO1xyXG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiByZXMuc3RhdHVzKDUwMCkuanNvbihlcnIpKTsgXHJcbiAgICB9LFxyXG5cclxuICAgIHVwZGF0ZVVzZXIocmVxLHJlcyl7XHJcbiAgICAgICAgY29uc3QgaWQgPSByZXEucGFyYW1zLmlkO1xyXG5cclxuICAgICAgICBVc2VyLmZpbmRPbmVBbmRVcGRhdGUoe19pZDogaWR9LHskc2V0OnJlcS5ib2R5fSx7bmV3OiB0cnVlfSkudGhlbih1c2VyID0+IHtcclxuICAgICAgICAgICAgaWYoIXN0dWRlbnQpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtlcnI6IFwidXNlciBub3QgZm91bmRcIn0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuanNvbih1c2VyKTtcclxuICAgICAgICB9KS5jYXRjaChlcnIgPT4gcmVzLnN0YXR1cyg1MDApLmpzb24oZXJyKSk7XHJcbiAgICB9XHJcbn0iXX0=